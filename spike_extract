#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-
"""
spike_extract - extracts spike times and features from pcm_seq2 data

Usage:

spike_extract [-l] [-o <outfile>] <explog>

         Preprocess <explog> and move pcm_seq2 files to directories for
         each pen/site (e.g. site_5_1)
         [-l] - leave files in the current directory
         [-o <outfile>] - specify an alternative parsed explog file

spike_extract -p <pen> -s <site> [--chan=""] [-i] [-r <rms_thresh> | -a <abs_thresh>]
         [-t|-T <max_rms>] [-f 3] [-w 20] [--kkwik] <explog.h5>

         Extract spike times and features for a pen/site into klusters format

         --chan: specify which channels to analyze. If multiple channels were
         recorded, these can be specified and grouped using the --chan
         flag.  For example, --chan='1,5,7' will extract spikes from
         channels 1,5, and 7.  If recording from tetrodes, grouping can
         be done with parentheses: e.g.  --chan='(1,2,3,4),(5,6,7,8)'

         -r/-a: specify dynamic/absolute thresholds for spike extraction.
         Either one value for all channels, or a quoted, comma
         delimited list, like '6.5,6.5,5'

         -t/-T limits analysis to episodes where the total rms is less
         than <max_rms>.  Use -t to calculate total rms across specified channels;
         use -T to calculate rms across all valid channels.

         -f flag controls how many principal components and their
         projections to calculate (default 3 per channel).
         -w controls the number of points on either side of the spike
         stored in the .spk file (default 20)

         --kkwik: run KlustaKwik on each group after it's extracted

         Outputs a number of files that can be used with Klusters or KlustaKwik.
           <base>.spk.<g> - the spike file
           <base>.fet.<g> - the feature file
           <base>.clu.<g> - the cluster file (all spikes assigned to one cluster)
           <base>.xml - the control file used by Klusters

        where <base> is site_<pen>_<site>
        and <g> is the spike group

        C. Daniel Meliza, 2008
"""

import os, sys, getopt

options = {
    'rms_thresh' : [4.5],
    'rms_all_chans' : False,
    'nfeats' : 3,
    'window' : 20,
    'channels' : [0],
    'kkwik': False,
    'sort_raw' : True
    }

### Check options before loading modules, which are pretty heavy
if __name__=="__main__":

    if len(sys.argv)<2:
        print __doc__
        sys.exit(-1)
    opts, args = getopt.getopt(sys.argv[1:], "p:s:r:a:f:o:t:e:w:T:ihlu",
                               ["chan=","unit=","help","kkwik"])
    opts = dict(opts)
    if opts.has_key('-h') or opts.has_key('--help'):
        print __doc__
        sys.exit(-1)
    if opts.has_key('-u'):
        # undocumented feature; moves pcm files back into current directory
        ans = raw_input('Move all pcm_seq2 files back into the current directory? [y/N] ')
        if ans.lower()=='y':
            for fname in os.listdir('.'):
                if fname.startswith('site_') and os.path.isdir(fname):
                    os.system('mv %s/* .' % fname)
                    os.rmdir(fname)
            print "Done!"
        sys.exit(0)
###

from mspikes import klusters, explog

###

if __name__=="__main__":

    k = None

    assert len(args) == 1, "Error: specify a parsed or unparsed explog file."
    infile = args[0]
    infileext = os.path.splitext(infile)[-1]
    if infileext == '.explog':
        # process flat explog file
        outfile = infile + '.h5'
        if opts.has_key('-l'):
            options['sort_raw'] = False
        if opts.has_key('-o'):
            outfile = opts['-o']

        if os.path.exists(outfile):
            os.remove(outfile)
        k = explog.readexplog(infile, outfile, options['sort_raw'])
        print "Parsed explog: %d episodes, %d stimuli, and %d channels" % \
              (k.totentries, k.totstimuli, k.nchannels)

    elif infileext == '.h5':
        if opts.has_key('-p'):
            pen = int(opts['-p'])
        else:
            print "Error: must specify pen/site"
            sys.exit(-1)
        if opts.has_key('-s'):
            site = int(opts['-s'])
        else:
            print "Error: must specify pen/site"
            sys.exit(-1)

        # open the explog file
        k = explog.explog(infile)
        k.site = (pen,site)

        for o,a in opts.items():
            if o == '-r':
                exec "thresh = [%s]" % a
                options['rms_thresh'] = thresh
            elif o == '-a':
                exec "thresh = [%s]" % a            
                options['abs_thresh'] = thresh
            elif o == '-t':
                options['max_rms'] = float(a)
            elif o == '-T':
                options['max_rms'] = float(a)
                options['rms_all_chans'] = True
            elif o == '-f':
                options['nfeats'] = int(a)
            elif o == '-w':
                options['window'] = int(a)
            elif o == '--kkwik':
                options['kkwik'] = True
            elif o == '--chan':
                exec "chans = [%s]" % a
                options['channels'] = chans
            elif o == '-i':
                options['invert'] = True

        if options.has_key('rms_thresh') and len(options['rms_thresh'])==1:
            options['rms_thresh'] *= len(options['channels'])
        if options.has_key('abs_thresh') and len(options['abs_thresh'])==1:
            options['abs_thresh'] *= len(options['channels'])

        changroups = options.pop('channels')
        klusters.extractgroups(k, 'site_%d_%d' % k.site, changroups, **options)
            
    else:
        print "Error: %s only accepts .explog and .explog.h5 files as input" % __file__
        sys.exit(-1)

    # cleanup removes an annoying message
    del(k)
        
