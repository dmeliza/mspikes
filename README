
This package is for extracting and sorting spike data from the explog
and pcm data generated by SABER.

saber generates pcm_seq2 files with raw data and an explog file that
tells what went on during each episode of the acquisition. For multi-
channel acquisition there is a pcm_seq2 file for each channel. In each
episode (i.e. rtrig event in saber, generally one per stimulus) the
data from each channel is stored in a separate entry in the associated
pcm_seq2 file.

What we want to get to are toe_lis files with spike times for each
presentation of the stimulus. Files should be grouped by recording
site (pen/site commands in saber) and by unit. This is a multi-stage
process, described below with example commands.


1. Parse the explog file into series of tables describing the times,
   locations, and associated stimuli for episodes. Optionally sort
   pcm_seq2 files according to site. Run:
   spike_extract <explog>

2. Eliminate unusable episodes. For instance, the animal might
   have moved.  Single events can usually be sorted out; prolonged wiggling
   generates big clusters of noise that can dramatically increase the
   RMS of the signal.  Calculate the RMS of each entry and plot it
   as a time series.  The bad episodes should pop out, even if the amount
   of cellular activity varies greatly.  Use the -t or --start/--stop flags
   in subsequent commands to exclude bad episodes.
   
   spike_view --stats -p <pen> -s <site> <explog.h5>

3. Set a threshold for the window discriminator. It usually makes
   sense to set the threshold in terms of RMS units above the mean,
   since the DC offset and RMS noise level can shift over the course
   of acquisition.  The threshold can usually be set fairly low
   (around 4.5x RMS) because any single unit worth the name will
   cluster out from the noise. Use the following command to examine
   waveforms (restricting to channels of interest with the chan argument):
   
   spike_view -p <pen> -s <site> [--chan=""] <explog.h5>

4. Extract spikes and compute principal components of waveforms. 
   Waveforms need to be upsampled and realigned before doing this.  
   Then calculate the projections of the waveforms on the top N
   principal components.

   spike_extract -p <pen> -s <site> [--chan=""] -r <thresh> <explog.h5>

5. Sort spikes. The files generated in step (4) are usable by KlustaKwik
   (for automated spike-sorting) and Klusters (for manual cluster cutting).
   Reccomend using KlustaKwik followed by Klusters to check clusters and
   adjust as needed.

6. Aggregate events into episodes (based on the start/stop times of episodes)
   and combine episodes based on the stimulus.  Output toe_lis files for each
   stimulus and each unit.  There are many arguments to groupevents
   that can be used to restrict output to specific episodes, units,
   or stimuli.

   groupevents ... <explog.h5>